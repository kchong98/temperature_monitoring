/*
  ArduinoMqttClient - WiFi Simple Sender

  This example connects to a MQTT broker and publishes a message to
  a topic once a second.

  The circuit:
  - Arduino MKR 1000, MKR 1010 or Uno WiFi Rev.2 board

  This example code is in the public domain.
*/

//Code that succesfully sends temperatures to ThingsBoard
//Foundation for code based on that from the example in Lab 3

#include <ArduinoMqttClient.h>
#include <WiFi.h>
#include <CooperativeMultitasking.h>
#include <Si7020.h>
#include <Wire.h>

#define Si7020_ADDR 0x40;

Si7020 Si = Si7020();

///////you may enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = "_____";
char pass[] = "_____";

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

const char broker[] = "demo.thingsboard.io";
int        port     = 1883;
const char topic[]  = "v1/devices/me/telemetry";

String username = "___________"; //authentication token here
String password = "";

const long interval = 1000;
unsigned long previousMillis = 0;


void setup() {
  
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to WPA SSID: ");
  Serial.println(ssid);
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
    // failed, retry
    Serial.print(".");
    
    delay(5000);
  Wire.begin();
  }

  Serial.println("You're connected to the network");
  Serial.println();

  // You can provide a unique client ID, if not set the library uses Arduino-millis()
  // Each client must have a unique client ID
  // mqttClient.setId("clientId");

  // You can provide a username and password for authentication
  // mqttClient.setUsernamePassword("username", "password");
  
  mqttClient.setUsernamePassword(username, password);

  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);

  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());

    while (1);
  }

  Serial.println("You're connected to the MQTT broker!");
  Serial.println();
}

//
String Temp(){
  return String(Si.getTemp());
}

void loop() {
  String msgpayload = "{";
  msgpayload += "\"temperature\":"; msgpayload += Temp(); msgpayload += "}";
  // call poll() regularly to allow the library to send MQTT keep alives which
  // avoids being disconnected by the brokerx
  mqttClient.poll();
  
  // send message, the Print interface can be used to set the message contents
  mqttClient.beginMessage(topic);
  mqttClient.print(msgpayload);
  mqttClient.endMessage();
  
  
  // send message, the Print interface can be used to set the message contents
  Serial.print("Sending message to topic: ");
  Serial.println(topic);
  Serial.print("Message: ");
  Serial.println(msgpayload);
  Serial.println();
  
  delay(5000);
}